#!/bin/bash

#
# Script to be run from jenkins jobs to build deb pkgs for a stack.
#

if [ ! "$#" == 5 ]; then
    echo "[RELEASE]" Wrong number of arguments
    echo "[RELEASE]" usage: $0 ROSVERSION ROSINSTALL STACK USERMIRROR REPOUPLOAD
    exit 3
fi

export BUILD_ROS_VERSION=$1
export SR_ROSINSTALL=$2
export STACK=$3
export USERMIRROR=$4
export REPOUPLOAD=$5

export DISTROS="lucid"      #the distro for which we're building
export ARCHS="amd64 i386"   # we're building for those archs

# lp:sr-build-tools needs to be checked out somewhere.
# sr-jenkins-slave should have done this for us.
export SR_BUILD_TOOLS="/opt/shadow/sr-build-tools"

if [ -z "$WORKSPACE" ]; then
    echo "[RELEASE]" WORKSPACE is not set. Can\'t run. Not being run by Jenkins?
    exit 1
fi

#set -x  # echo commands run
set -e   # die on errors

echo "[RELEASE]" Starting build

ros_dir="/opt/ros/$BUILD_ROS_VERSION"
sr_rosinstall="$SR_BUILD_TOOLS/data/$SR_ROSINSTALL"
if [ ! -f "$sr_rosinstall" ]; then
    echo "[RELEASE]" We don\'t have a ros install file for $sr_rosinstall!
    echo "[RELEASE]" Looks like someone needs to update sr-build-tools.
    exit 10
fi

# Create copy of the install file with build tools added.
sr_rosinstall_tmp=$(tempfile --suffix=.rosinstall)
cat "$sr_rosinstall" > "$sr_rosinstall_tmp"
cat >>"$sr_rosinstall_tmp" <<EOF

- bzr:
    uri: 'bzr+ssh://bzr@minaton/sr-release/stable'
    local-name: sr_release

- bzr:
    uri: 'bzr+ssh://bzr@minaton/sr-ros-release/stable'
    local-name: sr_ros_release
EOF

echo "[RELEASE]" Installing ros workspace for $sr_rosinstall
rm -rf "$WORKSPACE"/*
rosinstall "$WORKSPACE" "$ros_dir" "$sr_rosinstall_tmp"
source "$WORKSPACE/setup.bash"
export ROS_TEST_RESULTS_DIR="$WORKSPACE/test_results"
export ROS_LOG_DIR="$WORKSPACE/logs"

echo "[RELEASE]" Installing dependencies for: $STACK
rosdep install -y $STACK

echo "[RELEASE]" Running simple_create.py $STACK $BUILD_ROS_VERSION
VERSION=`rosrun release simple_create.py $STACK $BUILD_ROS_VERSION | xargs rosrun release get_version.py`

for DISTRO in $DISTROS; do
    rosrun rosdeb simple_create_source_deb.py $BUILD_ROS_VERSION $STACK $VERSION $DISTRO

    for arch in ${ARCHS}; do
	rosrun rosdeb simple_build_debs.py --rosinstall ${sr_rosinstall} --usermirror ${USERMIRROR} --force --besteffort --noramdisk --repoupload="$REPOUPLOAD" $BUILD_ROS_VERSION $STACK $DISTRO ${arch}
    done
done

rm -f "$sr_rosinstall_tmp"

echo "[RELEASE]" Done.
