#!/usr/bin/env python

"""
Script to sync github issues with cards on trello.

== Install ==

You will need the yaml, trello and github API access modules for this.

 sudo apt-get install python-yaml
 sudo pip install trello
 sudo pip install PyGithub

== Setup ==

To run we need a config file, by default it looks for a file called
github-trello-sync.yaml in the current director. A minimal config includes the
details needed to log into the github and trello services:

  trello_api_key: f10...................7c655c4
  trello_token: tg.....................................hj
  github_user: user
  github_password: spassword

Github is just a normal login for the site, needs access to the shadow org.

The trello api key can be obtained via the trello site developer pages. To get
a token run the script with a valid key and it should log a Token Url, open
that url in a browser while logged into trello and it will give you a token.

== Usage ==

Once you have the config file setup simple run the script to sync:

    github-trello-sync

Or to use a different location for the config:

    github-trello-sync --config=/etc/opt/github-trello-sync.yaml

== Sync ==

The sync runs along these lines:

* We sync github issues with trello cards.
* Github is generally considered the master source of infomation, trello the slave.
* New issues get added as trello cards, labeled with trello 'Gitub' label (purple by default)
* The script will only ever operate on cards with this 'github' label, ignoring others.
* Any card on trello that no longer has a matching, open, issue on github get
  get moved to the Done list.
* Then for each matching card, issue pair:
    * Card name set from issue repo name and title. Over-writes trello changes.
    * Card description (body text) set from github description. Over-writes trello changes.
    * If the issue has a user assigned on github but not in trello, the same user is assigned on trello.
    * If the trello card has a user assigned, set the assigned user on github
      to match. i.e. trello controls ticket assignment.
    * Any labels on Trello that have been given names that match labels in
      github will be synced, the cards labels are made to match the github
      ones.

The description on the trello card gets a section added at the end with the
github issue id it is linked to and a url link to the github website for that
issue. This embedded issue id is how the script matches the cards to their
issues.

== Links ==

* http://jacquev6.github.io/PyGithub/
* http://pythonhosted.org//trello/

"""

from pprint import PrettyPrinter
from datetime import datetime
import re, sys, logging, time, argparse
import yaml

from trello import TrelloApi
from github import Github

pp = PrettyPrinter(indent=4)

# Setup logging object
log = logging.getLogger(__name__)
ch = logging.StreamHandler()
formatter = logging.Formatter('[%(asctime)s] %(levelname)s - %(message)s')
ch.setFormatter(formatter)
log.addHandler(ch)


#
# Config
#

class Config(object):
    """Holds config for the script, applies defaults and loads from files."""
    def __init__(self):
        self.log_level = 'WARNING'
        self.trello_api_key = ''
        self.trello_token = ''
        self.trello_board_id = 'fnCbWCKD'
        # Use this label (identified by color on trello) to mark all cards this
        # script manages.
        self.trello_label = 'purple'
        # List name to add new cards to ie new tickets coming in
        self.new_card_list_name = 'Backlog'
        # Where cards go when closed on github
        self.done_list_name = 'Done'
        # Where cards go when they are re-opened
        self.current_list_name = 'Current'
        self.github_user = ''
        self.github_password = ''
        self.github_organization = 'shadow-robot'
        # A map of github user name to trello user name to map users where the
        # users names are not the same on the 2 services.
        self.github_2_trello_user = {}
        # Don't set this yourself, will get auto built from github_2_trello_user
        self.trello_2_github_user = {}

    def load(self, filepath):
        data = yaml.load(file(filepath))
        for k,v in data.iteritems():
            setattr(self, k, v)
        self.process()

    def process(self):
        # Convert log level str to constant
        if isinstance(self.log_level, str):
            numeric_level = getattr(logging, self.log_level.upper(), None)
            if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)

        # Build reverse lookup for users
        self.trello_2_github_user = {}
        for k,v in self.github_2_trello_user.iteritems():
            self.trello_2_github_user[v] = k

# Parse command line args
parser = argparse.ArgumentParser()
parser.add_argument("--config", type=str, default="github-trello-sync.yaml",
        help="where to find the config file")
args = parser.parse_args()

# Load config
conf = Config()
conf.load(args.config)

if not conf.github_user:
    conf.github_user = raw_input("Github user:")
if not conf.github_password:
    conf.github_password = raw_input("Github password:")

log.setLevel(conf.log_level)


#
# Setup API objects
#

trello = TrelloApi(conf.trello_api_key, conf.trello_token)
# The conf.trello_token above is obtained by visiting this url in browser, while
# logged in to trello
token_url = trello.get_token_url('Shadow Sync', expires='never', write_access=True)
log.info("Token url:%s"%token_url)

github = Github(conf.github_user, conf.github_password)

# Throws if not found.
github_org = github.get_organization(conf.github_organization)

# Throws if not found.
trello_board = trello.boards.get(conf.trello_board_id)


#
# Users and user mapping
#
# Note that trello forces all usernames to lowercase but github seems to
# prserve case, so we make ALL names lowercase for matching

# Get the list of trello_members
trello_members_by_username = {}
for m in trello.boards.get_member(conf.trello_board_id):
    trello_members_by_username[m['username'].lower()] = m

# Get the github members
github_members_by_username = {}
for m in github_org.get_members():
    log.info("Github member:%s"%m.login)
    github_members_by_username[m.login.lower()] = m

def github_2_trello_user(guser):
    """
    Maps a github user to a trello user.
    @param Git user from api, a github.NamedUser.NamedUser object.
    @return Trello user json, as returned by API.
    """
    if guser is None:
        return None
    name = guser.login.lower()
    if name not in trello_members_by_username:
        # Github and trello usernames dont match, so try config mapping
        if name in conf.github_2_trello_user:
            name = conf.github_2_trello_user[name]
        else:
            name = None
    if name in trello_members_by_username:
        return trello_members_by_username[name]
    log.warn("Failed to find trello user for github user:%s"%guser.login)
    return None

def trello_2_github_user(tuser):
    """
    Maps a trello user to a gihub user.
    @param Trello user json, as returned by API.
    @return Git user from api, a github.NamedUser.NamedUser object.
    """
    if tuser is None:
        return None
    name = tuser['username'].lower()
    if name not in github_members_by_username:
        # Github and trello usernames dont match, so try config mapping
        if name in conf.trello_2_github_user:
            name = conf.trello_2_github_user[name]
        else:
            name = None
    if name in github_members_by_username:
        return github_members_by_username[name]
    log.warn("Failed to find github user for trello user:%s"%tuser['username'])
    return None


#
# Trello lists, cards and github issues
#

trello_board = trello.boards.get(conf.trello_board_id)

# Labels that have been given names, to match against github
sync_labels = [n for n in trello_board['labelNames'].values() if n]

def trello_label_name_2_color(name):
    for k,v in trello_board['labelNames'].items():
        if v == name: return k
    raise KeyError(name)

def trello_label_color_2_name(color):
    return trello_board['labelNames'][color]

# Get the lists (the stacks of cards, e.g. Current, Backlog etc) from Trello
trello_lists = {}
trello_lists_by_id = {}
for l in trello.boards.get_list(conf.trello_board_id):
    trello_lists[l['name']] = l
    trello_lists_by_id[l['id']] = l
log.info("Found lists: %s"%(", ".join(trello_lists.keys())))

def get_github_issues():
    """
    Get the issue list from github. This call returns only open tickets.
    Returns issues as a dict of issue objects keyed on the issue id.
    """
    github_issues = {}
    for issue in github_org.get_issues(filter="all"):
        log.info("Github issue: " + str(issue.id) + " " + str(issue.title))
        github_issues[str(issue.id)] = issue
    return github_issues

def get_trello_cards(github_issues):
    """
    Get the cards from Trello. Filter to only the ones from github (by label).
    Pass a dict of github issues to link cards with matching github issue.
    """
    all_cards = trello.boards.get_card(conf.trello_board_id)
    cards = []
    for card in all_cards:
        for l in card['labels']:
            if l['color'] == conf.trello_label:
                break
        else: # Not tagged as managed so ignore
            continue
        m = re.search(r'^Issue:\s*(\d+)\s*$', card['desc'], re.MULTILINE)
        if not m:
            log.error("Failed to get github issue id from card id:%s name:%s"%(card['id'], card['name']))
            continue
        issue_id = m.group(1)

        # Add the parsed issue id, useful when no matching issue object found
        card['_github_issue_id'] = issue_id
        # Find the matching github issue and link, set none if no issue found
        card['_github_issue'] = None
        if str(issue_id) in github_issues:
            card['_github_issue'] = github_issues[str(issue_id)]

        # Link the list in for easy access later
        card['_list'] = trello_lists_by_id[card['idList']]

        cards.append(card)
        log.info("Found card %s for git issue: '%s' in %s"%(
            card['id'], issue_id, card['_list']['name']))
    return cards


#
# Sync the Trello cards with github
#

def issue_card_name(issue):
    return "[" + issue.repository.name + "] #" + str(issue.number) + " " + str(issue.title)

def sync_card_issue(card, issue):
    name = issue_card_name(issue)
    if not name == card['name']:
        log.debug("Updating name:%s -> %s"%(card['name'], name))
        trello.cards.update_name(card['id'], name)

    desc = issue.body + "\n\n"
    desc += "URL: %s\n"%(issue.html_url)
    desc += "Issue: %s\n"%(issue.id)
    if not desc == card['desc']:
        log.debug("Updating description")
        trello.cards.update_desc(card['id'], desc)

    # Check for re-opend issues
    if card['_list']['name'] == conf.done_list_name:
        log.info("Re-opening card %s moving to %s"%(card['id'], conf.current_list_name))
        trello.cards.update_idList(card['id'], trello_lists[conf.current_list_name]['id'])

    # We label the issues in github with the list name from trello
    glabels = set(l.name for l in issue.labels)
    log.debug("Github labels: %s"%glabels)
    new_labels = glabels - set(trello_lists.keys()) # Remove all list labels
    new_labels.add(card['_list']['name']) # Add the 1 we want
    if not new_labels == glabels:
        log.debug("Setting github labels %s -> %s"%(glabels, new_labels))
        issue.edit(labels=list(new_labels))

    # Sync any matching label names from github -> trello
    tlabels = set(l['name'] for l in card['labels'])
    log.debug("Trello labels: %s"%tlabels)
    new_labels = tlabels - set(sync_labels) # Remove all the sync labels
    # Add sync_labels that match a github label
    new_labels.update([n for n in glabels if n in sync_labels])
    # Re-add the trello label so we stayed synced
    new_labels.add(trello_label_color_2_name(conf.trello_label))
    if not new_labels == tlabels:
        for n in tlabels - new_labels:
            log.debug("Delete label: %s"%n)
            trello.cards.delete_label_color(trello_label_name_2_color(n), card['id'])
        for n in new_labels - tlabels:
            col = trello_label_name_2_color(n)
            log.debug("Add label: %s %s"%(n,col))
            trello.cards.new_label(card['id'], col)

    # Sync users
    members = trello.cards.get_member(card['id'])
    tuser = github_2_trello_user(issue.assignee)
    if not members and tuser:
        log.debug("Github user set but trello not set - set trello to github")
        trello.cards.new_member(card['id'], tuser['id'])
    elif members:
        # Card is assigned so update github
        if not tuser or not tuser['id'] == members[0]['id']:
            guser = trello_2_github_user(members[0])
            if guser:
                log.debug("Updating github issue assignee")
                issue.edit(assignee=guser)

def sync():
    """Sync cards and issues."""
    log.info("Starting sync")
    start_t = time.time()
    github_issues = get_github_issues()
    cards = get_trello_cards(github_issues)

    # Will throw key errors if we didn't find a match
    new_card_list = trello_lists[conf.new_card_list_name]
    done_list_id = trello_lists[conf.done_list_name]['id']

    # Add cards for new github tickets
    # Any issue not in this list is not in trello so needs adding
    card_issue_ids = [ str(c['_github_issue'].id)
            for c in cards if c['_github_issue'] is not None]
    for issue in github_issues.values():
        try:
            if str(issue.id) in card_issue_ids:
                continue
            card_name = issue_card_name(issue)
            log.info("Adding card: %s"%(card_name))
            new_card = trello.cards.new(card_name, new_card_list['id'])
            new_card['_list'] = new_card_list
            new_card['_github_issue'] = issue
            # Add the card to the list so it will also get synced below, adding the
            # rest of its details, desc etc. Top of list so synced first.
            cards.insert(0, new_card)
        except Exception as e:
            log.error(str(e))

    # Sync cards and issues
    for card in cards:
        try:
            if not card['_github_issue']:
                if not card['_list']['name'] == conf.done_list_name:
                    # No active issue so move to Done (but only once!)
                    log.info("Card Done %s (issue %s)"%(card['id'], card['_github_issue_id']))
                    trello.cards.update_idList(card['id'], done_list_id)
            else:
                # Card is active so update
                log.info("Syncing card %s (issue %s)"%(card['id'], card['_github_issue'].id))
                sync_card_issue(card, card['_github_issue'])
        except Exception as e:
            log.error("Card %s: %s"%(card['id'], str(e)))

    end_t = time.time()
    dt = end_t - start_t
    log.info("Finished sync %s issues in %ss"%(len(github_issues), dt))

sync()
