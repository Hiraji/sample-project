#!/bin/bash

#
# Quick and dirty script to scan a remote repo for branches and add jobs to
# jenkins for them. Deletes jobs with no matching branches.
#
# We only act on jobs that start with the job_prefix below. This is important
# when deleting, using a bad prefix might cause havoc on jenkins!
#
# Filters branches to F_* only.
#
# Probably contains assuptions for ronex (the label used) but should be pretty
# generic. Just needs a few more args.
#
# @TODO - Find jobs with no branch anymore and remove them
#

set -e # fail on errors
#set -x # echo commands run

#
# Oprions
#

usage() {
    echo usage: $0 [OPTIONS] REPO_URL
    echo "    REPO_URL - url to access git repo"
    echo "    -n       - Dry run, just print what would be done"
    exit 3
}

dry_run=""
job_prefix="sr-auto-"
job_labels="slave-ronex"
job_schedule="H/5 * * * *"
job_command="/opt/shadow/sr-build-tools/bin/sr-jenkins-catkin hydro"
jenkins_cmd="sr-jenkins-jobs -j jenkins:8080"
tmp_github_job_list="/tmp/$(basename $0)-github-jobs"

while getopts "hn" opt; do
    case $opt in
        '?'|h|:|\?)
            usage
        ;;
        n)
            dry_run="y"
        ;;
    esac
done
shift $((OPTIND-1))

if [ ! "$#" == 1 ]; then
    echo Wrong number of arguments
    usage
fi

REPO=$1


#
# Main
#

branch_to_name() {
    branch="$1"
    echo "$job_prefix$(basename $REPO .git)-$branch"
}

add_branch() {
    [ -n "$1" ] || { echo No branch!; return 10; }
    branch=$1
    #name="$(basename $REPO .git)-$branch"
    name=$(branch_to_name "$branch")
    #name="$prefix$name"
    # Add the job skipping errors for already exists
    $jenkins_cmd add \
        --name $name \
        --labels "$job_labels" \
        --git_source="$REPO" \
        --git_branch="$branch" \
        --schedule="$job_schedule" \
        --publish_junit \
        --command="$job_command" \
        --enable \
        2>/dev/null || return 0
    echo Added job name $name for $branch
    $jenkins_cmd build $name
}

# Find branches from github, adding jobs for them. Make a list of the jenkins
# job names for those braches
cat /dev/null > $tmp_github_job_list
for branch in $(git ls-remote --heads git@github.com:shadow-robot/sr-ronex.git | cut -f2 | sed 's/refs\/heads\///' | grep -i '^F_'); do
    name=$(branch_to_name "$branch")
    if [ -z "$dry_run" ]; then
        add_branch $branch
    else
        echo Add $branch as $name
    fi
    echo "$name" >> $tmp_github_job_list
done;

# Delete jobs for branches that don't exist anymore
# Only consider jobs that start with out prefix so we don't trash jenkins!
for job in $(sr-jenkins-jobs -j jenkins:8080 list "^$job_prefix" | sed 's/^.* - //')
do
    if ! grep -q "$job" $tmp_github_job_list; then
        # Job in jenkins but not branch on github
        if [ -z "$dry_run" ]; then
            $jenkins_cmd rm "$job"
        else
            echo Delete job $job
        fi
    fi
done

# Cleanup
if [ -z "$dry_run" ]; then
    rm "$tmp_github_job_list"
fi
