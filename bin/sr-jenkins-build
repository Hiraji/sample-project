#!/bin/bash

#
# Jenkins build script to make and test a ros package. The package, with its
# stack is also expected to be checked out into $WORKSPACE, which is what
# jenkins does.
# * Creates an overlay in $WORKSPACE of the installed ros and shadow dependancies.
# * Fixes test out put to be under jenkins workspace so jenkins can see it.
# * Fixes rostest rubbish xml out put (https://code.ros.org/trac/ros/ticket/3770)
# * Put ros logs into $WORKSPACE/logs so jenkins can see them.
# --mda
#

if [ ! "$#" == 3 ]; then
    echo Wrong number of arguments
    echo usage: $0 ROSVERSION ROSINSTALL PKGNAME
    exit 3
fi

export BUILD_ROS_VERSION=$1
export SR_ROSINSTALL=$2
export SR_PACKAGE=$3

# lp:sr-build-tools needs to be checked out somewhere.
# sr-jenkins-slave should have done this for us.
export SR_BUILD_TOOLS="/opt/shadow/sr-build-tools"

if [ -z "$WORKSPACE" ]; then
    echo WORKSPACE is not set. Can\'t run. Not being run by Jenkins?
    exit 1
fi

#set -x  # echo commands run

echo Starting build

ros_dir="/opt/ros/$BUILD_ROS_VERSION"
sr_rosinstall="$SR_BUILD_TOOLS/data/$SR_ROSINSTALL"
sr_ros="$HOME/shadow-ros-$BUILD_ROS_VERSION-$(basename "$SR_ROSINSTALL" .rosinstall)"
if [ ! -d "$ros_dir" ]; then
    echo Ros directory $ros_dir not found!
    echo Are you sure this is a valid version of ROS?
    echo Has this ros version been installed, ie slave bootstrapped properly?
    exit 10
fi
if [ ! -f "$sr_rosinstall" ]; then
    echo We don\'t have a ros install file for $sr_rosinstall!
    echo Looks like someone needs to update sr-build-tools.
    exit 10
fi

echo Installing ros workspace $sr_ros
# XXX - Due to bug in rosinstall/bzr the url changes from lp: to http:
#       for now we'll have to take the hit and remove and redownload and build
#       but we really need to fix this.
#ros_install_opts="--continue-on-error"
ros_install_opts="--delete-changed-uris"
if [ -d "$sr_ros" ]; then
    # rosinstall is not working well for us, it just re branches everytime. We
    # get no inplace update, so bodge that here.
    for d in $(find "$sr_ros" -type d -name '.bzr'); do
        (
            target=$(dirname "$d")
            cd $target
            bzr pull --overwrite
        )
    done
else
    rosinstall $ros_install_opts "$sr_ros" "$ros_dir" "$sr_rosinstall"
fi
rosinstall $ros_install_opts "$WORKSPACE" "$sr_ros"

source "$WORKSPACE/setup.bash"
ROS_PACKAGE_PATH="$WORKSPACE:$ROS_PACKAGE_PATH"
export ROS_TEST_RESULTS_DIR="$WORKSPACE/test_results"
export ROS_LOG_DIR="$WORKSPACE/logs"

# --robust?
echo Installing deps
rosdep install -y "$SR_PACKAGE"
rosdep_res=$?
res=$rosdep_res
if [ "$rosdep_res" == 0 ]; then
    echo Making and testing
    rosmake -t -v --profile "$SR_PACKAGE"
    rosmake_res=$?
    res=$rosmake_res
fi

# Write junit format XML test result for the build
# This makes the build visible in tests results and also stops failures for
# pkgs with not tests as no tests counts as a fail!
# http://stackoverflow.com/questions/4922867/junit-xml-format-specification-that-hudson-supports
# http://stackoverflow.com/questions/8697923/junit-xml-packages-in-hudson
mkdir -p "$ROS_TEST_RESULTS_DIR/_hudson"
test_file="$ROS_TEST_RESULTS_DIR/_hudson/rosmake.xml"
test_pkg="rosmake"
(
    echo "<testsuite tests='2' name='$test_pkg'>"
        echo "<testcase classname='$test_pkg.deps' name='$SR_PACKAGE'>"
        if [ ! "$rosdep_res" == 0 ]; then
            echo "    <failure type='DepFail'>rosdep status $rosdep_res</failure>"
        fi
        echo "</testcase>"

        echo "<testcase classname='$test_pkg.make' name='$SR_PACKAGE'>"
        if [ ! "$rosmake_res" == 0 ]; then
            echo "    <failure type='MakeFail'>rosmake status $rosmake_res</failure>"
        fi
        echo "</testcase>"
    echo "</testsuite>"
) > "$test_file"

rosrun rosunit clean_junit_xml.py

echo Build complete
exit $res
