#!/usr/bin/python

#To use you will need the python-jenkins package
#(http://packages.python.org/python-jenkins/). To install on ubuntu:
#
#    sudo apt-get install python-setuptools
#    sudo easy_install python-jenkins

from __future__ import print_function
import os, sys, logging, subprocess, optparse, re
from datetime import datetime
from xml.sax.saxutils import escape
import jenkins
import urllib2
from urlparse import urlparse
import yaml

def strip_indent(s):
    """Util to strip an fixed indent (based on first line) from all lines of
    a string. Used to fix up doc strings for help text generation."""
    s = re.sub(r'^\n+', '', s)
    m = re.match(r'^\s+', s)
    if not m: return s
    pat = re.compile('^%s' % m.group(0), flags=re.M)
    return re.sub(pat, '', s)

class SrJenkinsJob(object):
    """A light weight wrapper around the properties of job that can generate
    suitable XML for feeding to jenkins."""
    def __init__(self, name=None, url='', color=''):
        self.name         = name
        self.url          = url
        self.color        = color
        self.bzr_source   = ""
        self.git_source   = ""
        self.git_branch   = ""
        self.labels       = ""
        self.package      = ""
        self.schedule     = ""
        self.description  = ""
        self.command      = ""
        self.publish_junit = False
        if color:
            # jenkins module returns 'disabled' as a color, otherwise the jobs
            # current status color. grey=new job, blue, red etc
            if color == 'disabled':
                self.disabled = True
            else:
                self.disabled = False
        else:
            # Default to disabled
            self.disabled = True

    def __str__(self):
        return "%(_name)s '%(labels)s' %(bzr_source)s %(package)s" % self.__dict__

    def as_xml(self):
        """Generate the XML for this job"""
        var = self.__dict__
        for k in var:
            if not isinstance(var[k], basestring): continue
            var[k] = escape(var[k])
        var['disabled'] = 'True' if self.disabled else 'False'
        xml = """
        <project>
          <actions/>
          <description>%(description)s</description>
          <keepDependencies>false</keepDependencies>
          <properties/>
          """

        if var['bzr_source']:
            xml += """
              <scm class="hudson.plugins.bazaar.BazaarSCM">
                <source>%(bzr_source)s</source>
                <clean>true</clean>
                <checkout>false</checkout>
              </scm>
            """
        elif var['git_source']:
            xml += """
              <scm class="hudson.plugins.git.GitSCM">
                <configVersion>2</configVersion>
                <userRemoteConfigs>
                  <hudson.plugins.git.UserRemoteConfig>
                    <name></name>
                    <refspec></refspec>
                    <url>%(git_source)s</url>
                  </hudson.plugins.git.UserRemoteConfig>
                </userRemoteConfigs>
                <branches>
                  <hudson.plugins.git.BranchSpec>
                    <name>%(git_branch)s</name>
                  </hudson.plugins.git.BranchSpec>
                </branches>
              </scm>
            """
            pass
            """
              <scm class="hudson.plugins.git.GitSCM">
                <configVersion>2</configVersion>
                <userRemoteConfigs>
                  <hudson.plugins.git.UserRemoteConfig>
                    <name></name>
                    <refspec></refspec>
                    <url>%(git_source)</url>
                  </hudson.plugins.git.UserRemoteConfig>
                </userRemoteConfigs>
                <branches>
                  <hudson.plugins.git.BranchSpec>
                    <name>%(git_branch)</name>
                  </hudson.plugins.git.BranchSpec>
                </branches>
              </scm>
            """
        else:
            xml += """
                <scm class="hudson.scm.NullSCM"/>
            """

        if var['labels']:
            xml += """
          <assignedNode>%(labels)s</assignedNode>
            """

        xml += """
          <canRoam>false</canRoam>
          <disabled>%(disabled)s</disabled>
          <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
          <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
          <triggers class="vector">
        """

        if var['schedule']:
            xml += """
            <hudson.triggers.SCMTrigger>
              <spec>%(schedule)s</spec>
            </hudson.triggers.SCMTrigger>
            """

        xml += """
          </triggers>
          <concurrentBuild>false</concurrentBuild>
          <builders>
            <hudson.tasks.Shell>
              <command>%(command)s</command>
            </hudson.tasks.Shell>
          </builders>
          <publishers>
        """

        if var['publish_junit']:
            xml += """
            <hudson.tasks.junit.JUnitResultArchiver>
              <testResults>test_results/_hudson/*.xml</testResults>
              <keepLongStdio>false</keepLongStdio>
              <testDataPublishers/>
            </hudson.tasks.junit.JUnitResultArchiver>
            """

        xml += """
            <org.jenkinsci.plugins.emotional__jenkins.EmotionalJenkinsPublisher/>
          </publishers>
          <buildWrappers/>
        </project>
        """
        return xml % var

class CmdError(Exception):
    def __init__(self,msg,status=23):
        self.msg    = msg
        self.status = status
    def __str__(self):
        return self.msg

class SrJenkinsJobsCmd:
    def __init__(self):
        self.opts = None
        self.args = None
        self.log  = logging.getLogger('hello')
        self.log.setLevel(logging.DEBUG)
        self._j = None

    @property
    def j(self):
        """Get the jenkins handle. Auto connects on first call."""
        if not self._j:
            self.connect()
        return self._j

    def connect(self):
        """Connect to the jenkins server"""
        try:
            self._j = jenkins.Jenkins(
                    self.opts.jenkins_url, self.opts.username, self.opts.password)
            self._j.get_info() # Test the connection, throws if bad
        except (urllib2.URLError, TypeError) as e:
            raise CmdError("Failed to connect to %s : %s\n"
                    "You need to give a -j option or set JENKINS_URL"
                    % (self.opts.jenkins_url,e))
        self.log.debug("Connected to %s" % self.opts.jenkins_url)
        return True

    UsageText = """
    %prog -h|--help

    %prog COMMAND [OPTIONS] [PATTERN]

    %prog list|ls [OPTIONS] [PATTERN]
    %prog enable  [OPTIONS] [PATTERN]
    %prog disable [OPTIONS] [PATTERN]
    %prog delete|del|rm [OPTIONS] [PATTERN]
    %prog dumpxml [OPTIONS] [PATTERN]

    PATTERN - A regexp to match against job names.

    %prog add-rosinstall OPTIONS FILE

Long option names can be abbriviated to shortest unique name.

Examples:

    $ sr-jenkins-jobs -j jenkins:8080 add-rosinstall --prefix=sf- --dist=ubuntu --rel=lucid --arch=amd64 --ros=electric stiff_flop.rosinstall
    $ sr-jenkins-jobs -j jenkins:8080 ls
    $ sr-jenkins-jobs -j jenkins:8080 enable 'sf-.*'
    $ sr-jenkins-jobs -j jenkins:8080 build --all
    """
    def run(self):
        """Run the command, parse cmd line and do stuff."""
        optp = optparse.OptionParser(usage=self.UsageText)
        optp.add_option('--quiet', '-q', action="store_true", default=False,
                help="Don't log what is happening, only errors")
        optp.add_option('--debug', action="store_true", default=False,
                help="Log more info about what is happening")
        optp.add_option('--jenkins_url', '-j',
                default=os.environ['JENKINS_URL']
                    if 'JENKINS_URL' in os.environ else 'http://localhost:8080',
                help="Base url for the jenkins server. Will read JENKINS_URL "
                     "from the environment, command line value overrides. "
                     "Default: %default",
                metavar='URL')
        optp.add_option('--password', '-p', default='',
                help="Optional password for the jenkins server")
        optp.add_option('--username', '-u', default='',
                help="Optional user name for the jenkins server")
        optp.add_option('--all', action="store_true", default=False,
                help="For delete, enable, disable and build allow command on all jobs "
                     "when no PATTERN. Default=%default")

        grp = optparse.OptionGroup(optp, "Common add options:",
                "These options are common to all commands that add jobs.")
        grp.add_option('--prefix', default='',
                help="Prefix all created job names with this. Handy way to identify "
                     "them later. e.g. using list or delete actions. ")
        grp.add_option('--enable', action="store_true", default=False,
                help="Enable jobs when adding, otherwise create disabled. "
                     "Default=%default")
        grp.add_option('--replace',  action="store_true", default=False,
                help='If a job with the same name exists delete it before '
                     'creating the new one. Default=%default')
        grp.add_option('--xml', action="store_true", default=False,
                help="When adding jobs output the jenkins config XML instead "
                     "of adding the job to jenkins. Default=%default")
        optp.add_option_group(grp)

        grp = optparse.OptionGroup(optp, "Command: add OPTIONS",
                strip_indent(self.cmd_add.__doc__))
        grp.add_option('--name', default='',
                help="Name for new job. Has prefix applied. Required. ")
        grp.add_option('--labels', default='',
                help='Labels for the new job. Note that this is the string '
                     'as you would enter it into Jenkins UI.')
        grp.add_option('--command', default='',
                help="Command the job runs")
        grp.add_option('--bzr_source', default='', help="Bzr url for scm polling")
        grp.add_option('--git_source', default='', help="Git url for scm polling")
        grp.add_option('--git_branch', default='', help="Git branch for scm polling")
        grp.add_option('--publish_junit',  action="store_true", default=False,
                help='Publish the junit results after build.')
        optp.add_option_group(grp)

        grp = optparse.OptionGroup(optp, "Command: add-rosinstall OPTIONS FILE",
                strip_indent(self.cmd_add_rosinstall.__doc__))
        grp.add_option('--schedule', default='',
                help='Schedule field in job setup, how often to poll the vcs. '
                     'Looks a bit like a cron line, see jenkins for details. '
                     'e.g. "H/5 * * * *"')
        grp.add_option('--distros', '--dist', action='append',
                help='Distro(s) to create jobs for. Give multiple times for '
                "multiple distros. e.g. 'ubuntu'.")
        grp.add_option('--dist-releases', '--release', '--rel', action='append',
                help='Distro release(s) to create jobs for. Give multiple times for '
                     "multiple releases. e.g. 'lucid'")
        grp.add_option('--architectures', action='append',
                help='Architectures(s) to create jobs for. Give multiple times for '
                     "multiple architectures. e.g. 'i386' or 'amd64'")
        grp.add_option('--ros-versions', '--ros', action='append',
                help='ROS version(s) to create jobs for. Give multiple times '
                     " for multiple versions. e.g. 'electric', 'diamonback' ")
        grp.add_option('--workspace-install', '--wsinstall',
                help='ROS install file to use to create workspace for job to run in.'
                     ' Value is file name that must exist in sr-build-tools/data')
        optp.add_option_group(grp)
        
        grp = optparse.OptionGroup(optp, "Command: add-release OPTIONS FILE",
                strip_indent(self.cmd_add_release.__doc__))
        grp.add_option('--release-slave', default='slave-dev',
                help='Name of slave used for release builds. Default=%default')
        grp.add_option('--user-mirror', default='http://packages.shadow.local/ubuntu',
                help='Url for the deb repo we are building for. Default=%default')
        grp.add_option('--repo-upload',
                default='packages@packages.shadow.local:/srv/packages/ubuntu',
                help="SSH login and path for uploading devs. slave is assumed to already have a key set that allows access. Default=%default")
        optp.add_option_group(grp)

        self.opts, self.cmd_args = optp.parse_args()

        if self.opts.jenkins_url and not re.match(r'^http://', self.opts.jenkins_url):
            self.opts.jenkins_url = "http://"+self.opts.jenkins_url

        # Setting default above for append actions doesn't work as the default
        # will always be in the list. So, only set the default if no values
        # given on the command line.
        if not self.opts.distros or len(self.opts.distros) == 0:
            self.opts.distros = ['ubuntu']
        if not self.opts.ros_versions or len(self.opts.ros_versions) == 0:
            self.opts.ros_versions = ['electric']

        # Set the logger up
        ch = logging.StreamHandler()
        level = logging.INFO
        if self.opts.quiet:
            level = logging.ERROR
        elif self.opts.debug:
            level = logging.DEBUG
        ch.setLevel(level)
        ch.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
        self.log.addHandler(ch)

        # Dispatch
        try:
            if len(self.cmd_args) < 1:
                self.log.error("No command or help flag given")
                optp.print_usage()
                return 3

            self.cmd = self.cmd_args.pop(0)
            if   self.cmd in ['list', 'ls']:          return self.cmd_list()
            elif self.cmd in ['dumpxml']:             return self.cmd_dumpxml()
            elif self.cmd in ['delete', 'del', 'rm']: return self.cmd_delete()
            elif self.cmd in ['enable', 'on']:        return self.cmd_enable()
            elif self.cmd in ['disable', 'off']:      return self.cmd_disable()
            elif self.cmd in ['build', 'run']:        return self.cmd_build()
            elif self.cmd in ['add', 'create']:       return self.cmd_add()
            elif self.cmd in ['add-rosinstall']: return self.cmd_add_rosinstall()
            elif self.cmd in ['add-release']:    return self.cmd_add_release()
            else:
                self.log.error("Unknown command %s" % self.cmd)
                optp.print_usage()
                return 4
        except CmdError as err:
            self.log.critical(err)
            return err.status
        except:
            raise
        return 0

    def _get_arg_jobs(self):
        """Use cmd line args as list of re to match against job names and
        return the list of names that match. With no args returns all."""
        filt_re = None
        jobs = [ SrJenkinsJob( j['name'], color=j['color'], url=j['url'] )
                 for j in self.j.get_jobs() ]
        if not self.cmd_args:
            return jobs

        out = []
        for job in jobs:
            for filt_re in self.cmd_args:
                if re.match(filt_re, job.name):
                    out.append(job)
        return out

    def cmd_list(self):
        """List jobs"""
        for job in self._get_arg_jobs():
            print("{j.color:>10} - {j.name}".format(j=job))

    def cmd_dumpxml(self):
        """Dumpe xml config for a job"""
        for job in self._get_arg_jobs():
            print( self.j.get_job_config(job.name) )

    def cmd_delete(self):
        """Delete jobs named on command line"""
        if not self.cmd_args and not self.opts.all:
            self.log.warning("Refusing to delete all jobs! Use --all to force.")
            return
        for job in self._get_arg_jobs():
            self.del_job(job)

    def cmd_enable(self):
        """Enable jobs named on command line"""
        if not self.cmd_args and not self.opts.all:
            self.log.warning("Refusing to enable all jobs! Use --all to force.")
            return
        for job in self._get_arg_jobs():
            self.enable_job(job)

    def cmd_disable(self):
        """Disable jobs named on command line"""
        if not self.cmd_args and not self.opts.all:
            self.log.warning("Refusing to disable all jobs! Use --all to force.")
            return
        for job in self._get_arg_jobs():
            self.disable_job(job)

    def cmd_build(self):
        """Build jobs named on command line"""
        if not self.cmd_args and not self.opts.all:
            self.log.warning("Refusing to build all jobs! Use --all to force.")
            return
        for job in self._get_arg_jobs():
            self.build_job(job)

    def cmd_add(self):
        """Add a job to Jenkins"""
        if not self.opts.name:
            raise CmdError("No name, you must set --name")

        job = SrJenkinsJob()
        job.name       = self.opts.name
        job.bzr_source = self.opts.bzr_source
        job.git_source = self.opts.git_source
        job.git_branch = self.opts.git_branch
        job.labels     = self.opts.labels
        job.schedule   = self.opts.schedule
        job.command    = self.opts.command
        job.publish_junit = self.opts.publish_junit
        if self.add_job(job):
            return 0
        else:
            return 11


    def load_yaml(self,f):
        data = None
        try:
            data = yaml.load(open(f))
        except IOError as e:
            raise CmdError("Failed to open %s : %s" % (f, e))
        except yaml.YAMLError as e:
            raise CmdError("Failed to parse %s : %s" % (f, e))
        except:
            raise
        return data

    def cmd_add_rosinstall(self):
        """
        Generate jobs from a rosinstall file. For each stack listed add a job
        per package, searching the bzr uri for the list of packages.
        """
        if len(self.cmd_args) < 1: raise CmdError("No rosinstall file")
        f = self.cmd_args[0]
        data = self.load_yaml(f)

        # Use info to turn this into a set of add-packages calls
        if not self.opts.workspace_install:
            self.opts.workspace_install = os.path.basename(f)
        for inst in data:
            if not 'bzr' in inst:
                self.log.error("Can't handle non bzr source: %s " % inst.keys[0])
                continue
            self.add_packages(
                    stack    = inst['bzr']['local-name'],
                    branch   = inst['bzr']['uri'],
                    packages = self.bzr_find_packages(inst['bzr']['uri'])
                    )
        return 0

    def cmd_add_release(self):
        """Generate release jobs from a rosinstall file. Needs --ros-versions
        option above."""
        if len(self.cmd_args) < 1: raise CmdError("No rosinstall file")
        f = self.cmd_args[0]
        data = self.load_yaml(f)

        if not self.opts.workspace_install:
            self.opts.workspace_install = os.path.basename(f)

        for inst in data:
            if not 'bzr' in inst:
                self.log.error("Can't handle non bzr source: %s " % inst.keys[0])
                continue
            for rosv in self.opts.ros_versions:
                self.add_release_stack(
                        stack = inst['bzr']['local-name'],
                        rosv  = rosv,
                        ws    = self.opts.workspace_install,
                        user_mirror = self.opts.user_mirror,
                        repo_upload = self.opts.repo_upload
                        )
        return 0


    def add_packages(self, stack=None, branch=None, packages=None):
        """Generates a set of shadow build jobs for the given options and
        package list. Will generate jobs for all the combinations of options.
        """
        if not stack:
            raise CmdError("No stack")
        if not branch:
            raise CmdError("No branch")
        if not packages:
            raise CmdError("No packages")

        if not self.opts.distros:
            raise CmdError("No distros")
        if not self.opts.dist_releases:
            raise CmdError("No releases")
        if not self.opts.architectures:
            raise CmdError("No architectures")
        if not self.opts.ros_versions:
            raise CmdError("No ros_versions")
        if not self.opts.workspace_install:
            raise CmdError("No workspace_install")

        for dist in self.opts.distros:
            for rel in self.opts.dist_releases:
                for arch in self.opts.architectures:
                    for rosv in self.opts.ros_versions:
                            for pkg in packages:
                                self.add_package(
                                            stack=stack,
                                            dist=dist,
                                            rel=rel,
                                            arch=arch,
                                            rosv=rosv,
                                            branch=branch,
                                            pkg=pkg,
                                            ws=self.opts.workspace_install,
                                        )
        return 0


    def bzr_find_packages(self, uri):
        """For the given brz uri find all the ros package names."""
        cmd  = 'bzr ls --recursive "%s" | grep manifest.xml' % uri
        self.log.debug(cmd)
        proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
        out  = proc.communicate()[0]
        self.log.debug(out)
        if not out: return []
        pkgs = [ x.split('/')[-2] for x in out.split('\n') if x ]
        self.log.debug(pkgs)
        return pkgs

    def add_package(self, **args):
        """Add a package using the given config"""

        # Work out the bzr url
        # Does the branch look like a vcs url http: https: lp: bzr+ssh: etc
        bzr_src = ""
        if re.match(r'[\w\+]+:', args['branch']):
            # Avoid empty path component at the end
            args['branch'] = re.sub(r'/$', '', args['branch'])
            bzr_src = args['branch']
            url     = urlparse(args['branch'])
            parts   = url.path.split('/')
            if len(parts) == 0:
                raise CmdError('Bad branch url %s' % bzr_src)
            elif len(parts) == 1:
                args['branch'] = 'trunk'
            else:
                args['branch'] = parts[-1]
        else:
            bzr_src = "lp:~shadowrobot/%(stack)s/%(branch)s" % args

        job_name = "%(dist)s-%(rel)s-%(arch)s-%(rosv)s-%(branch)s-%(stack)s-%(pkg)s" % args
        job = SrJenkinsJob()
        job.name       = job_name
        job.package    = args['pkg']
        job.bzr_source = bzr_src
        job.labels     = " && ".join((args['dist'], args['rel'], args['arch']))
        job.schedule   = self.opts.schedule
        job.command    = "/opt/shadow/sr-build-tools/bin/sr-jenkins-build %(rosv)s %(ws)s %(pkg)s" % args
        job.publish_junit = True
        self.add_job(job)

    def add_release_stack(self, **args):
        """Add a release job for the given config"""
        job_name = "release-%(rosv)s-%(stack)s" % args
        job = SrJenkinsJob(job_name)
        job.labels     = self.opts.release_slave
        job.command    = "/opt/shadow/sr-build-tools/bin/sr-jenkins-release %(rosv)s %(ws)s %(stack)s \"%(user_mirror)s\" \"%(repo_upload)s\"" % args
        job.publish_junit = False
        self.add_job(job)

    def add_job(self, job):
        """Add a SrJenkinsJob, logging the action"""
        if self.opts.enable:
            job.disabled = False

        if self.opts.prefix:
            job.name = self.opts.prefix + job.name

        job.description += "Generated by\n%s\nat %s by %s" % (
                ' '.join(sys.argv), datetime.now().strftime('%Y-%m-%d %H:%M'),
                os.environ['USER'] )

        if self.opts.xml:
            print("Job: %s" % job.name);
            print(job.as_xml());
            return 0

        if self.j.job_exists(job.name):
            if self.opts.replace:
                self.del_job(job)
            else:
                self.log.error("Job %s already exists" % job.name)
                return False
        self.j.create_job(job.name, job.as_xml())
        self.log.info("Created job %s - Disabled:%s" % (job.name, job.disabled))
        return True

    def del_job(self, job):
        """Delete a SrJenkinsJob, logging the action"""
        self.j.delete_job(job.name)
        self.log.info("Deleted job %s" % job.name)

    def enable_job(self, job):
        """Enable a SrJenkinsJob, logging the action"""
        self.j.enable_job(job.name)
        self.log.info("Enabled job %s" % job.name)

    def disable_job(self, job):
        """Disable a SrJenkinsJob, logging the action"""
        self.j.disable_job(job.name)
        self.log.info("Disabled job %s" % job.name)

    def build_job(self, job):
        """Tell jenkins to build a SrJenkinsJob, logging the action"""
        self.j.build_job(job.name)
        self.log.info("Build job %s" % job.name)


if __name__ == '__main__':
    sys.exit(SrJenkinsJobsCmd().run())

