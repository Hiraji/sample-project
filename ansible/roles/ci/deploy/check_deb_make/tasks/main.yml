---
# Playbook for Deb files check

- name: Clean debian packages folders in case of the cached build
  shell: bash -c "rm -rf ./debian && rm -rf ./obj-x86_64-linux-gnu"
    chdir={{repo_sources_path}}/{{item.path}}
  with_items: "{{repo_packages_list|default([])}}"
  ignore_errors: True

- name: Clean debian packages from repository directory
  shell: bash -c "find . -name '*.deb' -type f -delete"
    chdir={{repo_sources_path}}
  ignore_errors: True

- name: Add line to rosdep package cache
  lineinfile: dest=/etc/ros/rosdep/sources.list.d/20-default.list line="yaml file://{{repo_sources_path}}/local_custom_rosdep.yaml"

- name: Create empty file or clean existing one
  shell: bash -c "cat /dev/null > {{repo_sources_path}}/local_custom_rosdep.yaml"

- name: Append repository packages to rosdep ignore list
  shell: echo "{{item.name}}:{{' '}}{ubuntu:[]}" >> {{repo_sources_path}}/local_custom_rosdep.yaml
  with_items: "{{repo_packages_list|default([])}}"
  when: complete_debian_packages_check

- name: Append workspace packages to rosdep ignore list
  shell: echo "{{item.name}}:{{' '}}{ubuntu:[]}" >> {{repo_sources_path}}/local_custom_rosdep.yaml
  with_items: "{{workspace_packages_list|default([])}}"
  when: not complete_debian_packages_check

- name: Update rosdep
  shell: bash -c "rosdep update"

- name: Generate ROS debian package files
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && bloom-generate rosdebian --os-name ubuntu --os-version trusty --ros-distro {{ros_release}}"
    chdir={{repo_sources_path}}/{{item.path}}
  with_items:
    - "{{repo_packages_list|default([])}}"

# Redundant loop count to make sure that even complex dependencies scenario is resolved
# mv command will fail in case if package is already installed for this case there is ignore_errors
- name: Create and install debian packages recursively in order to fix local dependencies
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && fakeroot ./debian/rules binary && mv -vt .  ../*.deb && sudo dpkg --install *.deb"
    chdir={{repo_sources_path}}/{{item[1].path}}
  ignore_errors: True
  with_nested:
    - "{{repo_packages_list|default([])}}"
    - "{{repo_packages_list|default([])}}"

# In case if there is not errors fakeroot will not create new deb file just exit with 0 else it will print error
- name: Check if debian build doesn't have any errors
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && fakeroot ./debian/rules binary"
    chdir={{repo_sources_path}}/{{item.path}}
  with_items:
    - "{{repo_packages_list|default([])}}"

- name: Check if debian install doesn't have any errors
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && sudo dpkg --install *.deb"
    chdir={{repo_sources_path}}/{{item.path}}
  with_items:
    - "{{repo_packages_list|default([])}}"

- name: Read all installed packages from repository
  shell: bash -c "find . -name '*.deb' -print0  | xargs -0 -I {} dpkg --info  {} | sed -n -e 's/^\s*Package:\s*//p'"
    chdir={{repo_sources_path}}
  register: installed_packages_names

- name: Set variable to workaround ansible type evaluation issue
  set_fact:
    installed_packages_names_stdout_lines: "{{installed_packages_names.stdout_lines}}"

- name: Uninstall all packages
  shell: bash -c "sudo dpkg --purge {{item}}"
  ignore_errors: True
  with_items:
    - "{{installed_packages_names_stdout_lines|default([])}}"
